/**
 * This function creates a custom frontend for Google search, Google image search, and Google advanced search.
 * It uses the public Google API to search for data.
 * 
 * @param {string} searchType - The type of search to perform (e.g. "web", "image", "advanced")
 * @param {string} query - The search query to perform
 * @param {object} options - Additional options for the search (e.g. "site", "filetype", "language")
 * 
 * @returns {Promise} - A promise that resolves with the search results
 */
async function googleSearch(searchType, query, options) {
  try {
    // Construct the search URL based on the search type and query
    let searchUrl = `https://www.google.com/search?q=${encodeURIComponent(query)}`;
    if (searchType === "image") {
      searchUrl = `https://www.google.com/search?tbm=isch&q=${encodeURIComponent(query)}`;
    } else if (searchType === "advanced") {
      searchUrl = `https://www.google.com/advanced_search?q=${encodeURIComponent(query)}`;
    }
    
    // Add any additional options to the search URL
    if (options) {
      Object.keys(options).forEach(key => {
        searchUrl += `&${key}=${encodeURIComponent(options[key])}`;
      });
    }
    
    // Fetch the search results from the Google API
    const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(searchUrl)}`);
    const data = await response.json();
    
    // Parse the search results from the HTML response
    const parser = new DOMParser();
    const html = parser.parseFromString(data.contents, "text/html");
    let results = [];
    if (searchType === "web") {
      results = Array.from(html.querySelectorAll("#search .g")).map(result => ({
        title: result.querySelector("h3").innerText,
        link: result.querySelector("a").href,
        description: result.querySelector(".st").innerText
      }));
    } else if (searchType === "image") {
      results = Array.from(html.querySelectorAll(".rg_i")).map(result => ({
        thumbnail: result.querySelector(".rg_i").src,
        link: result.parentNode.href
      }));
    } else if (searchType === "advanced") {
      results = Array.from(html.querySelectorAll(".g")).map(result => ({
        title: result.querySelector("h3").innerText,
        link: result.querySelector("a").href,
        description: result.querySelector(".st").innerText
      }));
    }
    
    // Return the search results
    return results;
  } catch (error) {
    console.error(error);
    return [];
  }
}
